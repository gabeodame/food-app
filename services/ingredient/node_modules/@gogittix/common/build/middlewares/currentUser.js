"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.currentUser = void 0;
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const base64url_1 = __importDefault(require("base64url"));
const parseSessionCookie = (cookie) => {
    try {
        const decoded = base64url_1.default.decode(cookie);
        const sessionData = JSON.parse(decoded);
        return sessionData.jwt || null;
    }
    catch (error) {
        console.error("Failed to parse session cookie:", error.message);
        return null;
    }
};
const currentUser = (req, res, next) => {
    var _a, _b;
    let token = null;
    if ((_a = req.session) === null || _a === void 0 ? void 0 : _a.jwt) {
        token = req.session.jwt; // JWT directly in session
        console.log("Token retrieved from session:", token);
    }
    else if ((_b = req.cookies) === null || _b === void 0 ? void 0 : _b.session) {
        token = parseSessionCookie(req.cookies.session); // Extract JWT from session cookie
        console.log("Token extracted from session cookie:", token);
    }
    else if (req.headers.authorization) {
        token = req.headers.authorization.split(" ")[1]; // Extract Bearer token
        console.log("Token retrieved from Authorization header:", token);
    }
    if (!token) {
        console.error("No valid token found.");
        return next(); // Proceed without setting currentUser
    }
    try {
        const payload = jsonwebtoken_1.default.verify(token, process.env.JWT_KEY);
        console.log("Payload Verified:", payload);
        req.currentUser = payload; // Set currentUser with payload
    }
    catch (error) {
        console.error("JWT verification failed:", error.message);
        req.currentUser = undefined; // Explicitly unset currentUser
    }
    next();
};
exports.currentUser = currentUser;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Listener = void 0;
class Listener {
    constructor(client) {
        this.client = client;
        this.ackWait = 5 * 1000; // 5 seconds wait time to resend the message to the listener
    }
    subscriptionOptions() {
        return this.client
            .subscriptionOptions()
            .setDeliverAllAvailable() // Default is false
            .setManualAckMode(true) // Default is false
            .setAckWait(this.ackWait) // Default is 30 seconds
            .setDurableName(this.queueGroupName); // Default is undefined
    }
    listen() {
        const subscription = this.client.subscribe(this.subject, // Name of the channel
        this.queueGroupName, // Name of the queue group
        this.subscriptionOptions() // Options
        );
        //
        subscription.on("message", (msg) => {
            console.log(`Message received: ${this.subject} / ${this.queueGroupName}`);
            const parsedData = this.parseMessage(msg);
            this.onMessage(parsedData, msg); // This method is implemented by the child class
        });
    }
    // This method is used to parse the message received from the NATS Streaming Server
    parseMessage(msg) {
        const data = msg.getData(); // Uint8Array | string | Buffer
        return typeof data === "string"
            ? JSON.parse(data)
            : JSON.parse(data.toString("utf8"));
    }
}
exports.Listener = Listener;

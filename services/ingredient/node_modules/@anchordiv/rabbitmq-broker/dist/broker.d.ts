import { Channel, Message, Options } from "amqplib";
interface QueueConfig {
    exchange: string;
    mainQueue: string;
    dlx: string;
    dlq: string;
    routingKey: string;
}
/**
 * RabbitMQBroker: Singleton for managing RabbitMQ connections, channels, and operations.
 */
export declare class RabbitMQBroker {
    private static instance;
    private connection;
    private channel;
    private eventEmitter;
    private constructor();
    /**
     * Get the singleton instance of RabbitMQBroker.
     * @returns RabbitMQBroker instance.
     */
    static getInstance(): RabbitMQBroker;
    /**
     * Initialize RabbitMQ connection and channel.
     * @param url - RabbitMQ connection URL.
     */
    init(url: string): Promise<void>;
    /**
     * Ensure the channel is initialized.
     */
    private ensureChannel;
    /**
     * Closes RabbitMQ connection and channel.
     */
    closeConnection(): Promise<void>;
    /**
     * Assert an exchange.
     * @param exchange - Exchange name.
     * @param type - Exchange type.
     * @param options - Exchange options.
     */
    assertExchange(exchange: string, type: "direct" | "topic" | "fanout" | "headers", options?: Options.AssertExchange): Promise<void>;
    /**
     * Assert a queue.
     * @param queue - Queue name.
     * @param options - Queue options.
     */
    setupQueue(queue: string, options?: Options.AssertQueue): Promise<void>;
    /**
     * Bind a queue to an exchange with a routing key.
     * @param queue - Queue name.
     * @param exchange - Exchange name.
     * @param routingKey - Routing key.
     */
    bindQueue(queue: string, exchange: string, routingKey: string): Promise<void>;
    /**
     * Publishes a message to a queue.
     * @param queue - Queue name.
     * @param message - Message to publish.
     * @param options - Publish options.
     */
    publishToQueue(queue: string, message: Buffer | string, options?: Options.Publish): Promise<void>;
    /**
     * Publishes a message to an exchange.
     * @param exchange - Exchange name.
     * @param routingKey - Routing key.
     * @param message - Message to publish.
     * @param options - Publish options.
     */
    publishToExchange(exchange: string, routingKey: string, message: Buffer | string, options?: Options.Publish): Promise<void>;
    /**
     * Consumes messages from a queue.
     * @param queue - Queue name.
     * @param onMessage - Callback to process messages.
     */
    consume(queue: string, onMessage: (msg: Message, channel: Channel) => Promise<void>): Promise<void>;
    /**
     * Sets up a dead-letter queue.
     * @param queue - Primary queue name.
     * @param dlx - Dead-letter exchange name.
     * @param dlq - Dead-letter queue name.
     */
    setupDeadLetterQueue(queue: string, dlx: string, dlq: string): Promise<void>;
    /**
     * Creates a high-level `MessageQueueManager`.
     * @param config - Queue configuration.
     * @returns A `MessageQueueManager` instance.
     */
    createMessageQueueManager(config: QueueConfig): MessageQueueManager;
}
/**
 * High-level manager for queues.
 */
declare class MessageQueueManager {
    private broker;
    private config;
    constructor(config: QueueConfig, broker: RabbitMQBroker);
    initialize(): Promise<void>;
    processMainQueue(handler: (msg: Message, channel: Channel) => Promise<void>): Promise<void>;
    processDLQ(handler: (msg: Message, channel: Channel) => Promise<void>): Promise<void>;
}
export default RabbitMQBroker;
export { MessageQueueManager };

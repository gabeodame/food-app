import amqp, { Connection, Channel, Message, Options } from "amqplib";
import EventEmitter from "events";

interface QueueConfig {
  exchange: string;
  mainQueue: string;
  dlx: string;
  dlq: string;
  routingKey: string;
}

/**
 * RabbitMQBroker: Singleton for managing RabbitMQ connections, channels, and operations.
 */
export class RabbitMQBroker {
  private static instance: RabbitMQBroker;
  private connection: Connection | null = null;
  private channel: Channel | null = null;
  private eventEmitter: EventEmitter;

  private constructor() {
    this.eventEmitter = new EventEmitter();
  }

  /**
   * Get the singleton instance of RabbitMQBroker.
   * @returns RabbitMQBroker instance.
   */
  public static getInstance(): RabbitMQBroker {
    if (!RabbitMQBroker.instance) {
      RabbitMQBroker.instance = new RabbitMQBroker();
    }
    return RabbitMQBroker.instance;
  }

  /**
   * Initialize RabbitMQ connection and channel.
   * @param url - RabbitMQ connection URL.
   */
  public async init(url: string): Promise<void> {
    if (!url) {
      throw new Error("RabbitMQ connection URL is undefined.");
    }

    try {
      this.connection = await amqp.connect(url.trim());
      this.channel = await this.connection.createChannel();
      console.log("RabbitMQ connection and channel established.");
      this.eventEmitter.emit("connected");
    } catch (error) {
      console.error("Failed to connect to RabbitMQ:", error);
      throw error;
    }
  }

  /**
   * Ensure the channel is initialized.
   */
  private ensureChannel(): Channel {
    if (!this.channel) {
      throw new Error(
        "RabbitMQ channel is not initialized. Call `init()` first."
      );
    }
    return this.channel;
  }

  /**
   * Closes RabbitMQ connection and channel.
   */
  public async closeConnection(): Promise<void> {
    try {
      if (this.channel) {
        await this.channel.close();
        this.channel = null;
      }
      if (this.connection) {
        await this.connection.close();
        this.connection = null;
      }
      console.log("RabbitMQ connection closed.");
      this.eventEmitter.emit("disconnected");
    } catch (error) {
      console.error("Error while closing RabbitMQ connection:", error);
    }
  }

  /**
   * Assert an exchange.
   * @param exchange - Exchange name.
   * @param type - Exchange type.
   * @param options - Exchange options.
   */
  public async assertExchange(
    exchange: string,
    type: "direct" | "topic" | "fanout" | "headers",
    options: Options.AssertExchange = { durable: true }
  ): Promise<void> {
    const channel = this.ensureChannel();
    try {
      await channel.assertExchange(exchange, type, options);
      console.log(`Exchange asserted: ${exchange}`);
    } catch (error) {
      console.error(`Failed to assert exchange: ${exchange}`, error);
      throw error;
    }
  }

  /**
   * Assert a queue.
   * @param queue - Queue name.
   * @param options - Queue options.
   */
  public async setupQueue(
    queue: string,
    options: Options.AssertQueue = {}
  ): Promise<void> {
    const channel = this.ensureChannel();
    try {
      await channel.assertQueue(queue, options);
      console.log(`Queue set up: ${queue}`);
    } catch (error) {
      console.error(`Failed to set up queue: ${queue}`, error);
      throw error;
    }
  }

  /**
   * Bind a queue to an exchange with a routing key.
   * @param queue - Queue name.
   * @param exchange - Exchange name.
   * @param routingKey - Routing key.
   */
  public async bindQueue(
    queue: string,
    exchange: string,
    routingKey: string
  ): Promise<void> {
    const channel = this.ensureChannel();
    try {
      await channel.bindQueue(queue, exchange, routingKey);
      console.log(
        `Queue "${queue}" bound to exchange "${exchange}" with routing key "${routingKey}"`
      );
    } catch (error) {
      console.error(`Failed to bind queue: ${queue}`, error);
      throw error;
    }
  }

  /**
   * Publishes a message to a queue.
   * @param queue - Queue name.
   * @param message - Message to publish.
   * @param options - Publish options.
   */
  public async publishToQueue(
    queue: string,
    message: Buffer | string,
    options: Options.Publish = {}
  ): Promise<void> {
    const channel = this.ensureChannel();
    try {
      await channel.assertQueue(queue, { durable: true });
      channel.sendToQueue(
        queue,
        Buffer.isBuffer(message) ? message : Buffer.from(message),
        options
      );
      console.log(`Message published to queue: ${queue}`);
    } catch (error) {
      console.error("Failed to publish message to queue:", error);
      throw error;
    }
  }

  /**
   * Publishes a message to an exchange.
   * @param exchange - Exchange name.
   * @param routingKey - Routing key.
   * @param message - Message to publish.
   * @param options - Publish options.
   */
  public async publishToExchange(
    exchange: string,
    routingKey: string,
    message: Buffer | string,
    options: Options.Publish = {}
  ): Promise<void> {
    const channel = this.ensureChannel();
    try {
      await channel.assertExchange(exchange, "topic", { durable: true });
      channel.publish(
        exchange,
        routingKey,
        Buffer.isBuffer(message) ? message : Buffer.from(message),
        options
      );
      console.log(`Message published to exchange: ${exchange}`);
    } catch (error) {
      console.error("Failed to publish message to exchange:", error);
      throw error;
    }
  }

  /**
   * Consumes messages from a queue.
   * @param queue - Queue name.
   * @param onMessage - Callback to process messages.
   */
  public async consume(
    queue: string,
    onMessage: (msg: Message, channel: Channel) => Promise<void>
  ): Promise<void> {
    const channel = this.ensureChannel();
    try {
      await channel.consume(queue, async (msg) => {
        if (msg) {
          try {
            await onMessage(msg, channel);
            channel.ack(msg);
          } catch (error) {
            console.error("Error processing message:", error);
            channel.nack(msg, false, true); // Requeue message
          }
        }
      });
      console.log(`Consumer set up for queue: ${queue}`);
    } catch (error) {
      console.error("Failed to set up consumer:", error);
      throw error;
    }
  }

  /**
   * Sets up a dead-letter queue.
   * @param queue - Primary queue name.
   * @param dlx - Dead-letter exchange name.
   * @param dlq - Dead-letter queue name.
   */
  public async setupDeadLetterQueue(
    queue: string,
    dlx: string,
    dlq: string
  ): Promise<void> {
    await this.assertExchange(dlx, "topic");
    await this.setupQueue(dlq, { durable: true });
    await this.bindQueue(dlq, dlx, "#");
    await this.setupQueue(queue, {
      durable: true,
      arguments: { "x-dead-letter-exchange": dlx },
    });
    console.log(`Dead-letter queue (${dlq}) set up for (${queue}).`);
  }

  /**
   * Creates a high-level `MessageQueueManager`.
   * @param config - Queue configuration.
   * @returns A `MessageQueueManager` instance.
   */
  public createMessageQueueManager(config: QueueConfig): MessageQueueManager {
    return new MessageQueueManager(config, this);
  }
}

/**
 * High-level manager for queues.
 */
class MessageQueueManager {
  private broker: RabbitMQBroker;
  private config: QueueConfig;

  constructor(config: QueueConfig, broker: RabbitMQBroker) {
    this.config = config;
    this.broker = broker;
  }

  public async initialize(): Promise<void> {
    const { exchange, mainQueue, dlx, dlq, routingKey } = this.config;
    await this.broker.setupDeadLetterQueue(mainQueue, dlx, dlq);
    await this.broker.assertExchange(exchange, "topic");
    await this.broker.setupQueue(mainQueue, {
      durable: true,
      arguments: { "x-dead-letter-exchange": dlx },
    });
    await this.broker.bindQueue(mainQueue, exchange, routingKey);
  }

  public async processMainQueue(
    handler: (msg: Message, channel: Channel) => Promise<void>
  ): Promise<void> {
    await this.broker.consume(this.config.mainQueue, handler);
  }

  public async processDLQ(
    handler: (msg: Message, channel: Channel) => Promise<void>
  ): Promise<void> {
    await this.broker.consume(this.config.dlq, handler);
  }
}

export default RabbitMQBroker;
export { MessageQueueManager };

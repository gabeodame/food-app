generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  comments      Comment[]
  favorites     Favorite[]
  pinnedRecipes PinnedRecipe[]
  recipes       Recipe[]
  reviews       Review[]
}

model Recipe {
  id                Int                  @id @default(autoincrement())
  title             String
  imageUrl          String
  description       String
  userId            Int
  views             Int                  @default(0)
  favoritesCount    Int                  @default(0)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  comments          Comment[]
  favoritedBy       Favorite[]           @relation("RecipeFavorites")
  ingredients       Ingredient[]
  instructions      Instruction[]
  pinnedBy          PinnedRecipe[]
  user              User                 @relation(fields: [userId], references: [id])
  RecipeCuisineType RecipeCuisineType[]
  categories        RecipeOnCategories[]
  RecipeSeason      RecipeSeason[]
  RecipeSpecialDiet RecipeSpecialDiet[]
  RecipeTag         RecipeTag[]
  reviews           Review[]
}

model PinnedRecipe {
  id        Int      @id @default(autoincrement())
  userId    Int
  recipeId  Int
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  recipeId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  userId    Int
  recipeId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  recipeId  Int
  createdAt DateTime @default(now())
  recipe    Recipe   @relation("RecipeFavorites", fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Category {
  id      Int                  @id @default(autoincrement())
  name    String               @unique
  recipes RecipeOnCategories[]
}

model Tag {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  RecipeTag RecipeTag[]
}

model CuisineType {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  RecipeCuisineType RecipeCuisineType[]
}

model Season {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  RecipeSeason RecipeSeason[]
}

model SpecialDiet {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  RecipeSpecialDiet RecipeSpecialDiet[]
}

model Ingredient {
  id       Int    @id @default(autoincrement())
  name     String
  quantity String
  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model Instruction {
  id       Int    @id @default(autoincrement())
  step     String
  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model RecipeOnCategories {
  recipeId   Int
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  recipe     Recipe   @relation(fields: [recipeId], references: [id])

  @@id([recipeId, categoryId])
}

model RecipeCuisineType {
  recipeId      Int
  cuisineTypeId Int
  CuisineType   CuisineType @relation(fields: [cuisineTypeId], references: [id])
  Recipe        Recipe      @relation(fields: [recipeId], references: [id])

  @@id([recipeId, cuisineTypeId])
}

model RecipeSeason {
  recipeId Int
  seasonId Int
  Recipe   Recipe @relation(fields: [recipeId], references: [id])
  Season   Season @relation(fields: [seasonId], references: [id])

  @@id([recipeId, seasonId])
}

model RecipeSpecialDiet {
  recipeId      Int
  specialDietId Int
  Recipe        Recipe      @relation(fields: [recipeId], references: [id])
  SpecialDiet   SpecialDiet @relation(fields: [specialDietId], references: [id])

  @@id([recipeId, specialDietId])
}

model RecipeTag {
  recipeId Int
  tagId    Int
  Recipe   Recipe @relation(fields: [recipeId], references: [id])
  Tag      Tag    @relation(fields: [tagId], references: [id])

  @@id([recipeId, tagId])
}
